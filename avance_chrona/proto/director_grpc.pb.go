// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: director.proto

package Director

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KillingFloorClient is the client API for KillingFloor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KillingFloorClient interface {
	Decision(ctx context.Context, in *Merc_Dir, opts ...grpc.CallOption) (*Dir_Merc, error)
	Merc_Dir_Monto(ctx context.Context, in *Merc_Dir2, opts ...grpc.CallOption) (*Dir_Merc2, error)
	Pet_Monto(ctx context.Context, in *Dir_DBank, opts ...grpc.CallOption) (*DBank_Dir, error)
}

type killingFloorClient struct {
	cc grpc.ClientConnInterface
}

func NewKillingFloorClient(cc grpc.ClientConnInterface) KillingFloorClient {
	return &killingFloorClient{cc}
}

func (c *killingFloorClient) Decision(ctx context.Context, in *Merc_Dir, opts ...grpc.CallOption) (*Dir_Merc, error) {
	out := new(Dir_Merc)
	err := c.cc.Invoke(ctx, "/director.KillingFloor/Decision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *killingFloorClient) Merc_Dir_Monto(ctx context.Context, in *Merc_Dir2, opts ...grpc.CallOption) (*Dir_Merc2, error) {
	out := new(Dir_Merc2)
	err := c.cc.Invoke(ctx, "/director.KillingFloor/Merc_Dir_Monto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *killingFloorClient) Pet_Monto(ctx context.Context, in *Dir_DBank, opts ...grpc.CallOption) (*DBank_Dir, error) {
	out := new(DBank_Dir)
	err := c.cc.Invoke(ctx, "/director.KillingFloor/Pet_Monto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KillingFloorServer is the server API for KillingFloor service.
// All implementations must embed UnimplementedKillingFloorServer
// for forward compatibility
type KillingFloorServer interface {
	Decision(context.Context, *Merc_Dir) (*Dir_Merc, error)
	Merc_Dir_Monto(context.Context, *Merc_Dir2) (*Dir_Merc2, error)
	Pet_Monto(context.Context, *Dir_DBank) (*DBank_Dir, error)
	mustEmbedUnimplementedKillingFloorServer()
}

// UnimplementedKillingFloorServer must be embedded to have forward compatible implementations.
type UnimplementedKillingFloorServer struct {
}

func (UnimplementedKillingFloorServer) Decision(context.Context, *Merc_Dir) (*Dir_Merc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decision not implemented")
}
func (UnimplementedKillingFloorServer) Merc_Dir_Monto(context.Context, *Merc_Dir2) (*Dir_Merc2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merc_Dir_Monto not implemented")
}
func (UnimplementedKillingFloorServer) Pet_Monto(context.Context, *Dir_DBank) (*DBank_Dir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pet_Monto not implemented")
}
func (UnimplementedKillingFloorServer) mustEmbedUnimplementedKillingFloorServer() {}

// UnsafeKillingFloorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KillingFloorServer will
// result in compilation errors.
type UnsafeKillingFloorServer interface {
	mustEmbedUnimplementedKillingFloorServer()
}

func RegisterKillingFloorServer(s grpc.ServiceRegistrar, srv KillingFloorServer) {
	s.RegisterService(&KillingFloor_ServiceDesc, srv)
}

func _KillingFloor_Decision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Merc_Dir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillingFloorServer).Decision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.KillingFloor/Decision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillingFloorServer).Decision(ctx, req.(*Merc_Dir))
	}
	return interceptor(ctx, in, info, handler)
}

func _KillingFloor_Merc_Dir_Monto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Merc_Dir2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillingFloorServer).Merc_Dir_Monto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.KillingFloor/Merc_Dir_Monto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillingFloorServer).Merc_Dir_Monto(ctx, req.(*Merc_Dir2))
	}
	return interceptor(ctx, in, info, handler)
}

func _KillingFloor_Pet_Monto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dir_DBank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KillingFloorServer).Pet_Monto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.KillingFloor/Pet_Monto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KillingFloorServer).Pet_Monto(ctx, req.(*Dir_DBank))
	}
	return interceptor(ctx, in, info, handler)
}

// KillingFloor_ServiceDesc is the grpc.ServiceDesc for KillingFloor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KillingFloor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "director.KillingFloor",
	HandlerType: (*KillingFloorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decision",
			Handler:    _KillingFloor_Decision_Handler,
		},
		{
			MethodName: "Merc_Dir_Monto",
			Handler:    _KillingFloor_Merc_Dir_Monto_Handler,
		},
		{
			MethodName: "Pet_Monto",
			Handler:    _KillingFloor_Pet_Monto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "director.proto",
}
